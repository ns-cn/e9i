package main

import (
	"encoding/json"
	"fmt"
	"net/http"
	"strconv"
)

const (
	// apiSearch 搜索的接口URL
	apiSearh = "https://api.tangyujun.com/search?keywords=%s"
)

// Search 搜索关键词
func Search(keyword string) []Song {
	resp, err := http.Get(fmt.Sprintf(apiSearh, keyword))
	if err != nil {
		panic(err)
	}
	defer resp.Body.Close()
	var result ApiSearchResult
	err = json.NewDecoder(resp.Body).Decode(&result)
	if err != nil {
		panic(err)
	}
	return result.GetSongs()
}

// Generated by https://quicktype.io

// ApiSearchResult 搜索结果解析模型
type ApiSearchResult struct {
	Result ApiSearchResultResult `json:"result"`
	Code   int64                 `json:"code"`
}

// GetSongs 搜索结果转换为内部的歌曲模型
func (result ApiSearchResult) GetSongs() []Song {
	songs := make([]Song, 0)
	if result.Code != 200 {
		return songs
	}
	for _, song := range result.Result.Songs {
		songs = append(songs, song.toModel())
	}
	return songs
}

// Result 结果的内部结果
type ApiSearchResultResult struct {
	Songs     []ApiSearchSong `json:"songs"`
	HasMore   bool            `json:"hasMore"`
	SongCount int64           `json:"songCount"`
}

// Song 单个歌曲的信息
type ApiSearchSong struct {
	ID          int64             `json:"id"`
	Name        string            `json:"name"`
	Artists     []ApiSearchArtist `json:"artists"`
	Album       ApiSearchAlbum    `json:"album"`
	Duration    int64             `json:"duration"`
	CopyrightID int64             `json:"copyrightId"`
	Status      int64             `json:"status"`
	Alias       []string          `json:"alias"`
	Rtype       int64             `json:"rtype"`
	Ftype       int64             `json:"ftype"`
	Mvid        int64             `json:"mvid"`
	Fee         int64             `json:"fee"`
	RURL        interface{}       `json:"rUrl"`
	Mark        int64             `json:"mark"`
	TransNames  []string          `json:"transNames"`
}

// toModel 将歌曲转换为内部的模型
func (song ApiSearchSong) toModel() Song {
	target := Song{}
	target.Source = NetEase
	target.ID = strconv.FormatInt(song.ID, 10)
	target.Name = song.Name
	target.Artists = make([]Artist, 0)
	for _, artist := range song.Artists {
		target.Artists = append(target.Artists, artist.toModel())
	}
	target.Album = song.Album.toModel()
	return target
}

// Album 搜索结果的专辑模型
type ApiSearchAlbum struct {
	ID          int64           `json:"id"`
	Name        string          `json:"name"`
	Artist      ApiSearchArtist `json:"artist"`
	PublishTime int64           `json:"publishTime"`
	Size        int64           `json:"size"`
	CopyrightID int64           `json:"copyrightId"`
	Status      int64           `json:"status"`
	PicID       int64           `json:"picId"`
	Mark        int64           `json:"mark"`
	Alia        []string        `json:"alia"`
}

// toModel 专辑的搜索结果模型转换为内部模型
func (album ApiSearchAlbum) toModel() Album {
	target := Album{}
	target.Source = NetEase
	target.ID = strconv.FormatInt(album.ID, 10)
	target.Name = album.Name
	return target
}

// Artist 歌手
type ApiSearchArtist struct {
	ID        int64         `json:"id"`
	Name      string        `json:"name"`
	PicURL    interface{}   `json:"picUrl"`
	Alias     []interface{} `json:"alias"`
	AlbumSize int64         `json:"albumSize"`
	PicID     int64         `json:"picId"`
	FansGroup interface{}   `json:"fansGroup"`
	Img1V1URL string        `json:"img1v1Url"`
	Img1V1    int64         `json:"img1v1"`
	Trans     interface{}   `json:"trans"`
}

// toModel 接口模型转内部模型
func (artist ApiSearchArtist) toModel() Artist {
	target := Artist{}
	target.Source = NetEase
	target.ID = strconv.FormatInt(artist.ID, 10)
	target.Name = artist.Name
	return target
}
